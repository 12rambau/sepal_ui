name: Build

on:
  push:
    branches:
      - main
  pull_request:

env:
  PLANET_API_CREDENTIALS: ${{ secrets.PLANET_API_CREDENTIALS }}
  PLANET_API_KEY: ${{ secrets.PLANET_API_KEY }}
  EARTHENGINE_TOKEN: ${{ secrets.EARTHENGINE_TOKEN }}

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-python@v4
        with:
          python-version: "3.10"
      - uses: pre-commit/action@v3.0.0

  #mypy:
  #  runs-on: ubuntu-latest
  #  steps:
  #    - uses: actions/checkout@v3
  #    - uses: actions/setup-python@v4
  #      with:
  #        python-version: "3.10"
  #    - name: Install dependencies
  #      run: pip install mypy
  #    - name: run mypy checks
  #      run: mypy .

  build:
    needs: [lint]
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.8", "3.9", "3.10"]
        include:
          - os: macos-latest # macos test
            python-version: "3.10"
          - os: windows-latest # windows test
            python-version: "3.10"
    steps:
      - uses: actions/checkout@v3
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install dependencies
        run: python -m pip install .[test]
      - name: test with pytest
        run: pytest --color=yes --cov --cov-report=xml tests
      - name: coverage
        run: coverage xml
      - name: codecov
        uses: codecov/codecov-action@v3
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          verbose: true
      - name: assess dead fixtures
        if: matrix.python-version == '3.10'
        run: pytest --dead-fixtures

  entry-point:
    needs: [build]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-python@v4
        with:
          python-version: "3.10"
      - name: Install dependencies
        run: python -m pip install .
      - name: test the entrypoints
        run: |
          module_deploy --help
          module_factory --help
          module_l10n --help
          module_theme --help
          module_venv --help
          activate_venv --help
          sepal_ipyvuetify --help

  docs:
    needs: [build]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-python@v4
        with:
          python-version: "3.10"
      - name: Install dependencies
        run: python -m pip install .[doc]
      - name: build the documentation
        run: |
          python -m pip install git+https://github.com/sphinx-doc/sphinx.git
          sphinx-apidoc --force --module-first --templatedir=docs/source/_templates/apidoc -o docs/source/modules ./sepal_ui
          sphinx-build -b html docs/source docs/build/html --keep-going -w warnings.txt
      - name: Check that there are no unexpected Sphinx warnings
        run: python tests/check_warnings.py

  apps:
    needs: [build]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-python@v4
        with:
          python-version: "3.10"
      - name: Install dependencies
        run: python -m pip install .[test]
      - name: build the template panel application
        run: pytest --nbmake sepal_ui/templates/panel_app/ui.ipynb
      - name: build the template map application
        run: pytest --nbmake sepal_ui/templates/map_app/ui.ipynb
